#!/usr/bin/env bash
#
# Test which nodes are involved in internal snapshots
#
# Copyright (C) 2019 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# creator
owner=kwolf@redhat.com

# adapted by Claudio Fontana <cfontana@suse.de>
#
# this is a standalone extract from 267 focused on the first backing file
# testcase, which failed consistently on s390 and less consistently
# on X86 under particular conditions, depending on the number of fields
# in the migration stream.
#
# Also, in contrast to 267, we do not "require" anything,
# which fixes running under valgrind, which otherwise breaks.
#

seq=`basename $0`
echo "QA output created by $seq"

status=1	# failure is the default!

_cleanup()
{
    _cleanup_test_img
}
trap "_cleanup; exit \$status" 0 1 2 3 15

# get standard environment, filters and checks
. ./common.rc
. ./common.filter

_supported_fmt qcow2
_supported_proto file
_supported_os Linux

# Internal snapshots are (currently) impossible with refcount_bits=1,
# and generally impossible with external data files
_unsupported_imgopts 'refcount_bits=1[^0-9]' data_file

do_run_qemu()
{
    echo Testing: "$@"
    (
        if ! test -t 0; then
            while read cmd; do
                echo $cmd
            done
        fi
        echo quit
    ) | $QEMU -nographic -monitor stdio -nodefaults "$@"
    echo
}

run_qemu()
{
    do_run_qemu "$@" 2>&1 | _filter_testdir | _filter_qemu | _filter_hmp |
        _filter_generated_node_ids | _filter_imgfmt | _filter_vmstate_size
}

size=128M

run_test()
{
    _make_test_img -b "$BACKING_FILE" -F $IMGFMT $size
    printf "savevm snap0\ninfo snapshots\nloadvm snap0\n" | run_qemu "$@" | _filter_date
}

echo
echo "=== -blockdev with a backing file ==="
echo

TEST_IMG="$TEST_IMG.base" _make_test_img $size

BACKING_FILE="$TEST_IMG.base" \
run_test -blockdev driver=file,filename="$TEST_IMG.base",node-name=backing-file \
         -blockdev driver=file,filename="$TEST_IMG",node-name=file \
         -blockdev driver=$IMGFMT,file=file,backing=backing-file,node-name=fmt

# success, all done
echo "*** done"
rm -f $seq.full
status=0
